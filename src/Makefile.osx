# File: Makefile.osx

# This is a (rather crude) Makefile for Mac OS X Carbon port of Sil.
#
# It was originally designed for NPPAngband
# It is based on Makefile.std, made separate because this port does 
# not use main.c.
#
# The main changes for Sil are:
#     removing:
#        quest.c / quest.o
#     renaming most instances of 'angband' to 'sil'
#        a notable exception is 'angband.h'

# If you are able to construct "main-xxx.c" and/or "Makefile.xxx"
# files for a currently unsupported system, please send them to
# Robert Ruehlmann < rr9@thangorodrim.net > for inclusion in future
# versions.
#
# This Makefile comes with "default" dependencies that may be obsolete.

# Installing the Developer CD and you'll have this, as well as full
# set of Mac OS programming documentation (HTML and PDF)
CC = gcc

# Some Developer CD tools we need - the standard installation location
TOOLDIR = /Developer/Tools
REZ = $(TOOLDIR)/Rez
# DEREZ = $(TOOLDIR)/DeRez
SETFILE = $(TOOLDIR)/SetFile

#
# The "source" and "object" files.
#

SRCS = \
  z-util.c z-virt.c z-form.c z-rand.c z-term.c \
  variable.c tables.c util.c cave.c \
  object1.c object2.c monster1.c monster2.c \
  xtra1.c xtra2.c spells1.c spells2.c \
  melee1.c melee2.c save.c files.c \
  cmd1.c cmd2.c cmd3.c cmd4.c cmd5.c cmd6.c \
  birth.c load.c squelch.c \
  wizard1.c wizard2.c obj-info.c \
  generate.c dungeon.c init1.c init2.c randart.c \
  automaton.c \
  main-crb.c \
  use-obj.c
 

OBJS = \
  z-util.o z-virt.o z-form.o z-rand.o z-term.o \
  variable.o tables.o util.o cave.o \
  object1.o object2.o monster1.o monster2.o \
  xtra1.o xtra2.o spells1.o spells2.o \
  melee1.o melee2.o save.o files.o \
  cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o cmd6.o \
  birth.o load.o squelch.o \
  wizard1.o wizard2.o obj-info.o \
  generate.o dungeon.o init1.o init2.o randart.o \
  automaton.o \
  main-crb.o \
  use-obj.o

# Can add '-arch ppc' if needed

CFLAGS = \
	-Wall -Wextra -O0 -fpascal-strings -DMACH_O_CARBON -mmacosx-version-min=10.5 -arch i386
LIBS = -framework CoreFoundation -framework QuickTime -framework Carbon


#
# Default target.
#
all: install


#
# Install the game.
#

# Application bundle -- a directory looking like an ordinary application

# Name of the game
APPNAME = Sil.app
# Bundle of the game (it must be a directory whose name ends in ".app")
APPBNDL = ../$(APPNAME)

# A bundle must have these subdirectories
APPCONT = $(APPBNDL)/Contents
APPBIN = $(APPCONT)/MacOS
APPRES = $(APPCONT)/Resources

# Auxiliary files. Please note that it still uses resouce fork based
# resources for menus, dialogues and sounds, so that it isn't safe to use
# utilities that doesn't understand them (virtually all Un*x commands) to
# copy or archive the application.
#
# The graphics tiles have been moved out of the resource fork, but, again,
# it isn't generally safe just to convert GIF or BMP files to PNG, because
# the Mac OS takes dpi values stored in various images quite seriously.
# Almost all tilesets for *band requires adjustment, with the sole exception
# of 8x8.bmp for Vanilla.  Make sure setting dpi to 72, *not* preserving
# the actual size of image.  When you have them ready, put them in the src
# directory and "make install-tiles".
ICONFILES = Sil.icns Save.icns Edit.icns Data.icns
TILES = ../lib/xtra/graf/8x8.png ../lib/xtra/graf/16x16.png ../lib/xtra/graf/32x32.png
PLIST = Sil.xml
RESSRCS = Sil.r
# RESSRCS = Sil.r Sound.r
RFLAGS = -i /Developer/Headers/FlatCarbon -d MACH_O_CARBON

install: Sil $(RESSRCS) $(ICONFILES) $(PLIST)
	[ -d $(APPBNDL) ] || mkdir $(APPBNDL)
	[ -d $(APPCONT) ] || mkdir $(APPCONT)
	[ -d $(APPBIN) ] || mkdir $(APPBIN)
	[ -d $(APPRES) ] || mkdir $(APPRES)
	install -m 755 Sil $(APPBIN)
	install -m 644 $(ICONFILES) $(APPRES)
	$(REZ) $(RFLAGS) -o $(APPRES)/Sil.rsrc $(RESSRCS)
	install -m 644 $(PLIST) $(APPCONT)/Info.plist
	install -m 644 $(TILES) $(APPRES)
	$(SETFILE) -a B $(APPBNDL)

install-tiles: $(TILES)
	install -m 644 $(TILES) $(APPRES)


#
# Build the "Sil" program
#

Sil: $(OBJS)
	$(CC) $(CFLAGS) $(LDFLAGS) -o Sil $(OBJS) $(LIBS)


#
# Clean up old junk
#

clean:
	-rm -f *.o Sil


#
# Generate dependencies automatically
#

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)



#
# Hack -- some file dependencies
#

HDRS = \
  h-basic.h \
  h-define.h h-type.h h-system.h h-config.h

INCS = \
  angband.h \
  config.h defines.h types.h externs.h \
  z-term.h z-rand.h z-util.h z-virt.h z-form.h $(HDRS)


birth.o: birth.c $(INCS)
automaton.o: automaton.c $(INCS)
cave.o: cave.c $(INCS)
cmd1.o: cmd1.c $(INCS)
cmd2.o: cmd2.c $(INCS)
cmd3.o: cmd3.c $(INCS)
cmd4.o: cmd4.c $(INCS)
cmd5.o: cmd5.c $(INCS)
cmd6.o: cmd6.c $(INCS)
dungeon.o: dungeon.c $(INCS)
files.o: files.c $(INCS)
generate.o: generate.c $(INCS)
init1.o: init1.c $(INCS) init.h
init2.o: init2.c $(INCS) init.h
load.o: load.c $(INCS)  init.h
melee1.o: melee1.c $(INCS)
melee2.o: melee2.c $(INCS)
monster1.o: monster1.c $(INCS)
monster2.o: monster2.c $(INCS)
obj-info.o: obj-info.c $(INCS)
object1.o: object1.c $(INCS)
object2.o: object2.c $(INCS)
randart.o: randart.c $(INCS) init.h
save.o: save.c $(INCS)
spells1.o: spells1.c $(INCS)
spells2.o: spells2.c $(INCS)
squelch.o: squelch.c $(INCS)
tables.o: tables.c $(INCS)
use-obj.o: use-obj.c $(INCS)
util.o: util.c $(INCS)
variable.o: variable.c $(INCS)
wizard1.o: wizard1.c $(INCS)
wizard2.o: wizard2.c $(INCS)
xtra1.o: xtra1.c $(INCS)
xtra2.o: xtra2.c $(INCS)
z-form.o: z-form.c $(HDRS) z-form.h z-util.h z-virt.h
z-rand.o: z-rand.c $(HDRS) z-rand.h
z-term.o: z-term.c $(HDRS) z-term.h z-virt.h
z-util.o: z-util.c $(HDRS) z-util.h
z-virt.o: z-virt.c $(HDRS) z-virt.h z-util.h


